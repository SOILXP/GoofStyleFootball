-- ModuleScript | decompile
-- FullName: ReplicatedStorage.LightningBolt.LightningSparks

-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/brNTY8nX8t)
-- Decompiled on 2025-09-10 13:25:41
-- Luau version 6, Types version 3
-- Time taken: 0.010872 seconds

local tbl_11_upvr = {}
local random_state_upvr = Random.new()
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1, arg2, arg3, arg4) -- Line 11
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: tbl_11_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1.Enabled = true
	if arg3 ~= nil then
		setmetatable_result1.Part = arg3
	else
		setmetatable_result1.LightningBolt = arg1
	end
	setmetatable_result1.SparkColor = arg4
	setmetatable_result1.MaxSparkCount = arg2 or 10
	setmetatable_result1.MinSpeed = 4
	setmetatable_result1.MaxSpeed = 6
	setmetatable_result1.MinDistance = 3
	setmetatable_result1.MaxDistance = 6
	setmetatable_result1.MinPartsPerSpark = 8
	setmetatable_result1.MaxPartsPerSpark = 10
	setmetatable_result1.SparksN = 0
	setmetatable_result1.SlotTable = {}
	setmetatable_result1.RefIndex = #tbl_11_upvr + 1
	tbl_11_upvr[setmetatable_result1.RefIndex] = setmetatable_result1
	return setmetatable_result1
end
function module_upvr.Destroy(arg1) -- Line 39
	--[[ Upvalues[1]:
		[1]: tbl_11_upvr (readonly)
	]]
	tbl_11_upvr[arg1.RefIndex] = nil
	for i, v in pairs(arg1.SlotTable) do
		if v.Parts[1].Parent == nil then
			arg1.SlotTable[i] = nil
		end
	end
end
function RandomVectorOffset(arg1, arg2) -- Line 51
	--[[ Upvalues[1]:
		[1]: random_state_upvr (readonly)
	]]
	return (CFrame.lookAt(Vector3.new(), arg1) * CFrame.Angles(0, 0, random_state_upvr:NextNumber(0, (-math.pi*2))) * CFrame.Angles(math.acos(random_state_upvr:NextNumber(math.cos(arg2), 1)), 0, 0)).LookVector
end
local Parent_upvr = require(script.Parent)
game:GetService("RunService").Heartbeat:Connect(function() -- Line 55
	--[[ Upvalues[3]:
		[1]: tbl_11_upvr (readonly)
		[2]: random_state_upvr (readonly)
		[3]: Parent_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	for _, v_2 in pairs(tbl_11_upvr) do
		local var117
		if var117 == true then
			var117 = v_2.SparksN
			if var117 < v_2.MaxSparkCount then
				var117 = v_2.Part
				local var118
				if var117 ~= nil then
					var117 = v_2.Part
					if var117.Parent == nil then
						v_2:Destroy()
						return
					end
					var118 = random_state_upvr:NextInteger(1, v_2.MaxSparkCount - v_2.SparksN)
					for i_3 = 1, var118 do
						var118 = random_state_upvr:NextNumber(-0.5, 0.5)
						local tbl_7 = {}
						local tbl_3 = {}
						tbl_7.WorldPosition = var117.Position + Vector3.new(math.random(-150, 150) * 0.01, math.random(-150, 150) * 0.01, math.random(-150, 150) * 0.01)
						tbl_3.WorldPosition = tbl_7.WorldPosition + RandomVectorOffset(var117.CFrame.RightVector, 0.7853981633974483) * random_state_upvr:NextNumber(v_2.MinDistance, v_2.MaxDistance)
						tbl_7.WorldAxis = (tbl_3.WorldPosition - tbl_7.WorldPosition).Unit
						tbl_3.WorldAxis = tbl_7.WorldAxis
						local any_new_result1_4 = Parent_upvr.new(tbl_7, tbl_3, random_state_upvr:NextInteger(v_2.MinPartsPerSpark, v_2.MaxPartsPerSpark))
						any_new_result1_4.MinRadius = 0
						any_new_result1_4.MaxRadius = 0.8
						any_new_result1_4.AnimationSpeed = 0
						any_new_result1_4.Thickness = var117.Size.X
						any_new_result1_4.MinThicknessMultiplier = 1
						any_new_result1_4.MaxThicknessMultiplier = 1
						any_new_result1_4.PulseLength = random_state_upvr:NextNumber(0.25, 0.75)
						any_new_result1_4.PulseSpeed = random_state_upvr:NextNumber(v_2.MinSpeed, v_2.MaxSpeed)
						any_new_result1_4.FadeLength = random_state_upvr:NextNumber(0.125, 0.375)
						local any_ToHSV_result1_3, _, any_ToHSV_result3 = var117.Color:ToHSV()
						local SparkColor_3 = v_2.SparkColor
						if not SparkColor_3 then
							SparkColor_3 = Color3.fromHSV(any_ToHSV_result1_3, 0.5, any_ToHSV_result3)
						end
						any_new_result1_4.Color = SparkColor_3
					end
				else
					var117 = v_2.LightningBolt
					i_3 = var117.Parts
					if i_3[1].Parent == nil then
						v_2:Destroy()
						return
					end
					local Parts = var117.Parts
					i_3 = {}
					local var127 = i_3
					var118 = #Parts
					for i_4 = 1, var118 do
						if Parts[i_4].Transparency < 0.3 then
							var127[#var127 + 1] = (i_4 - 0.5) / #Parts
						end
					end
					var118 = nil
					if #var127 ~= 0 then
						var118 = math.ceil(var127[1] * v_2.MaxSparkCount)
					end
					for i_5 = 1, random_state_upvr:NextInteger(1, v_2.MaxSparkCount - v_2.SparksN) do
						if #var127 == 0 then break end
						local tbl_9 = {}
						local var129
						for i_6 = var118, math.ceil(var127[#var127] * v_2.MaxSparkCount) do
							var129 = v_2.SlotTable
							if var129[i_6] == nil then
								var129 = #tbl_9
								tbl_9[var129 + 1] = i_6
							end
						end
						if #tbl_9 ~= 0 then
							var129 = #tbl_9
							var129 = 0.5
							local any_NextNumber_result1_2 = random_state_upvr:NextNumber(-0.5, var129)
							var129 = tbl_9[random_state_upvr:NextInteger(1, var129)] - 0.5
							var129 = v_2.MaxSparkCount
							i_6 = (var129 + any_NextNumber_result1_2) / var129
							var129 = 1
							for i_7 = 1, #var127 do
								if math.abs(var127[i_7] - i_6) < 10 then
									-- KONSTANTERROR: Expression was reused, decompilation is incorrect
									var129 = math.floor(var127[i_7] * #Parts + 0.5 + 0.5)
								end
							end
							local var133 = Parts[var129]
							local tbl_5 = {}
							local tbl_8 = {}
							tbl_5.WorldPosition = var133.Position + any_NextNumber_result1_2 * var133.CFrame.RightVector * var133.Size.X
							tbl_8.WorldPosition = tbl_5.WorldPosition + RandomVectorOffset(var133.CFrame.RightVector, 0.7853981633974483) * random_state_upvr:NextNumber(v_2.MinDistance, v_2.MaxDistance)
							tbl_5.WorldAxis = (tbl_8.WorldPosition - tbl_5.WorldPosition).Unit
							tbl_8.WorldAxis = tbl_5.WorldAxis
							local any_new_result1_2 = Parent_upvr.new(tbl_5, tbl_8, random_state_upvr:NextInteger(v_2.MinPartsPerSpark, v_2.MaxPartsPerSpark))
							any_new_result1_2.MinRadius = 0
							any_new_result1_2.MaxRadius = 0.8
							any_new_result1_2.AnimationSpeed = 0
							any_new_result1_2.Thickness = var133.Size.Y / 2
							any_new_result1_2.MinThicknessMultiplier = 1
							any_new_result1_2.MaxThicknessMultiplier = 1
							any_new_result1_2.PulseLength = 0.5
							any_new_result1_2.PulseSpeed = random_state_upvr:NextNumber(v_2.MinSpeed, v_2.MaxSpeed)
							any_new_result1_2.FadeLength = 0.25
							local any_ToHSV_result1_2, _, any_ToHSV_result3_3 = var133.Color:ToHSV()
							local SparkColor_2 = v_2.SparkColor
							if not SparkColor_2 then
								SparkColor_2 = Color3.fromHSV(any_ToHSV_result1_2, 0.5, any_ToHSV_result3_3)
							end
							any_new_result1_2.Color = SparkColor_2
							v_2.SlotTable[tbl_9[random_state_upvr:NextInteger(1, var129)]] = any_new_result1_2
						end
					end
				end
			end
		end
		var117 = 0
		for i_8, v_3 in pairs(v_2.SlotTable) do
			i_5 = v_3.Parts
			if i_5[1].Parent ~= nil then
				var117 += 1
			else
				v_2.SlotTable[i_8] = nil
			end
		end
		v_2.SparksN = var117
	end
end)
return module_upvr